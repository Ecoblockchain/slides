{
  "name": "stream-collector",
  "version": "1.0.1",
  "description": "Buffer data from a stream into an array if a callback is provided",
  "main": "index.js",
  "dependencies": {
    "once": "^1.3.1"
  },
  "devDependencies": {
    "tape": "^3.0.3",
    "through2": "^0.6.3"
  },
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/stream-collector.git"
  },
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/stream-collector/issues"
  },
  "homepage": "https://github.com/mafintosh/stream-collector",
  "readme": "# stream-collector\n\nBuffer `data` from a stream into an array if a callback is provided\n\n```\nnpm install stream-collector\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/stream-collector.svg?style=flat)](http://travis-ci.org/mafintosh/stream-collector)\n\n## Usage\n\n``` js\nvar collect = require('stream-collector')\n\ncollect(stream, function(err, list) {\n  // list contains all data chunks from stream  \n})\n```\n\nThe `stream` is always returned from the function. If a callback isn't provided no buffering will occur.\nThis allows you to do the following pattern where if you provide a callback the stream will be buffered (similar to how [request](https://github.com/mikeal/request) works)\n\n``` js\nvar read = function(cb) {\n  var stream = db.createReadStream()\n  return collect(stream, cb)\n}\n\nvar stream = read() // does not buffer\n\nread(function(err, list) {\n  // buffers the data\n})\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "stream-collector@1.0.1",
  "_shasum": "4d4e55f171356121b2c5f6559f944705ab28db15",
  "_resolved": "https://registry.npmjs.org/stream-collector/-/stream-collector-1.0.1.tgz",
  "_from": "stream-collector@>=1.0.1 <2.0.0"
}
