{
  "name": "level-logs",
  "version": "1.1.0",
  "description": "Store multiple append only logs in leveldb.",
  "main": "index.js",
  "dependencies": {
    "lexicographic-integer": "^1.1.0",
    "pump": "^1.0.0",
    "through2": "^0.6.3",
    "from2": "^1.3.0",
    "stream-collector": "^1.0.1"
  },
  "devDependencies": {
    "memdb": "^0.2.0",
    "standard": "^2.3.1",
    "tape": "^3.5.0"
  },
  "scripts": {
    "test": "standard && tape test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/level-logs.git"
  },
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/level-logs/issues"
  },
  "homepage": "https://github.com/mafintosh/level-logs",
  "readme": "# level-logs\n\nStore multiple append only logs in leveldb.\n\n```\nnpm install level-logs\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/level-logs.svg?style=flat)](http://travis-ci.org/mafintosh/level-logs)\n\n## Usage\n\n``` js\nvar logs = require('level-logs')(db) // where db is a levelup\n\nlogs.append('mathias', 'hello', function (err) {\n  logs.append('mathias', 'world', function (err) {\n    logs.createReadStream('mathias')\n      .on('data', function (data) {\n        console.log(data)\n      })\n  })\n})\n```\n\nRunning the above outputs\n\n``` js\n{\n  log: 'mathias',\n  seq: 1,\n  value: 'hello'\n}\n{\n  log: 'mathias',\n  seq: 2,\n  value: 'world'\n}\n```\n\n## API\n\n#### `logs = levelLogs(db, [options])`\n\nCreate a new logs instance. Options include\n\n```\n{\n  valueEncoding: 'json', // set a levelup value encoding\n  prefix: 'logs',        // prefix all keys with this prefix\n  separator: '!'         // use this as log key separator\n}\n```\n\n#### `logs.append(log, value, cb)`\n\nAppend a value to a log.\n\n#### `logs.put(log, seq, value, [cb])`\n\nInsert a value into a log at position `seq`. Normally you want seq to be the head of the log +1.\nThis method is useful if you want to cache the head position of the log somehow.\n\n``` js\nlogs.head('mathias', function (err, seq) {\n  logs.put('mathias', seq + 1, 'hello', function (err) {\n    ...\n  })\n})\n```\n\n#### `logs.get(log, seq, cb)`\n\nGet a value from a log at position `seq`\n\n#### `logs.head(seq, cb)`\n\nThe the head `seq` of a log. If the log doesn't exist the head will be `0`\n\n``` js\nlogs.head('some-log', function (err, seq) {\n  console.log('head of some-log is', seq)\n})\n```\n\n#### `stream = logs.list()`\n\nReturn a list of all logs names as a readable stream\n\n``` js\nvar names = logs.list()\n\nnames.on('data', function (name) {\n  console.log('there is a log called', name)\n})\n```\n\n#### `key = logs.key(log, seq)`\n\nGet the leveldb key the value stored in a log at position `seq`.\nThis is useful if you want to batch multiple operations together.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "level-logs@1.1.0",
  "_shasum": "15f75c9144fbb941ca251df4696d7ad467b78ad2",
  "_resolved": "https://registry.npmjs.org/level-logs/-/level-logs-1.1.0.tgz",
  "_from": "level-logs@>=1.1.0 <2.0.0"
}
